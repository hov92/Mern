{"ast":null,"code":"var _jsxFileName = \"/Users/dwaynehovington/Desktop/Mern/mern/client/src/screens/SupportScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\nexport default function SupportScreen() {\n  const [selectedUser, setSelectedUser] = useState({});\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const userSignin = useSelector(state => state.userSignin);\n  const {\n    userInfo\n  } = userSignin;\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (!socket) {\n      const sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin\n      });\n      sk.on('message', data => {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [...allMessages, data];\n        } else {\n          const existUser = allUsers.find(user => user._id === data._id);\n\n          if (existUser) {\n            allUsers = allUsers.map(user => user._id === existUser._id ? { ...user,\n              unread: true\n            } : user);\n            setUsers(allUsers);\n          }\n        }\n\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', updatedUser => {\n        const existUser = allUsers.find(user => user._id === updatedUser._id);\n\n        if (existUser) {\n          allUsers = allUsers.map(user => user._id === existUser._id ? updatedUser : user);\n          setUsers(allUsers);\n        } else {\n          allUsers = [...allUsers, updatedUser];\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', updatedUsers => {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', user => {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, users, userInfo._id, userInfo.isAdmin, userInfo.name]);\n\n  const selectUser = user => {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    const existUser = allUsers.find(x => x._id === user._id);\n\n    if (existUser) {\n      allUsers = allUsers.map(x => x._id === existUser._id ? { ...x,\n        unread: false\n      } : x);\n      setUsers(allUsers);\n    }\n\n    socket.emit('onUserSelected', user);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [...allMessages, {\n        body: messageBody,\n        name: userInfo.name\n      }];\n      setMessages(allMessages);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id\n        });\n      }, 1000);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row top full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-1 support-users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, users.filter(x => x._id !== userInfo._id).length === 0 && /*#__PURE__*/React.createElement(MessageBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, \"No Online User Found\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, users.filter(x => x._id !== userInfo._id).map(user => /*#__PURE__*/React.createElement(\"li\", {\n    key: user._id,\n    className: user._id === selectedUser._id ? '  selected' : '  ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"block\",\n    type: \"button\",\n    onClick: () => selectUser(user),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, user.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: user.unread ? 'unread' : user.online ? 'online' : 'offline',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-3 support-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, !selectedUser._id ? /*#__PURE__*/React.createElement(MessageBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, \"Select a user to start chat\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 33\n    }\n  }, \"Chat with \", selectedUser.name, \" \")), /*#__PURE__*/React.createElement(\"ul\", {\n    ref: uiMessagesRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }\n  }, messages.length === 0 && /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 59\n    }\n  }, \"No message.\"), messages.map((msg, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 41\n    }\n  }, `${msg.name}: `), \" \", msg.body))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: messageBody,\n    onChange: e => setMessageBody(e.target.value),\n    type: \"text\",\n    placeholder: \"type message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 37\n    }\n  }, \"Send\"))))));\n}","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/Mern/mern/client/src/screens/SupportScreen.js"],"names":["React","useEffect","useRef","useState","socketIOClient","useSelector","MessageBox","allUsers","allMessages","allSelectedUser","ENDPOINT","window","location","host","indexOf","SupportScreen","selectedUser","setSelectedUser","socket","setSocket","uiMessagesRef","messageBody","setMessageBody","messages","setMessages","users","setUsers","userSignin","state","userInfo","current","scrollBy","top","clientHeight","left","behavior","sk","emit","_id","name","isAdmin","on","data","existUser","find","user","map","unread","updatedUser","updatedUsers","selectUser","x","submitHandler","e","preventDefault","trim","alert","body","setTimeout","filter","length","online","msg","index","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\n\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT =\n    window.location.host.indexOf('localhost') >= 0\n        ? 'http://127.0.0.1:5000'\n        : window.location.host;\n\nexport default function SupportScreen() {\n    const [selectedUser, setSelectedUser] = useState({});\n    const [socket, setSocket] = useState(null);\n    const uiMessagesRef = useRef(null);\n    const [messageBody, setMessageBody] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState([]);\n    const userSignin = useSelector((state) => state.userSignin);\n    const { userInfo } = userSignin;\n\n    useEffect(() => {\n        if (uiMessagesRef.current) {\n            uiMessagesRef.current.scrollBy({\n                top: uiMessagesRef.current.clientHeight,\n                left: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        if (!socket) {\n            const sk = socketIOClient(ENDPOINT);\n            setSocket(sk);\n            sk.emit('onLogin', {\n                _id: userInfo._id,\n                name: userInfo.name,\n                isAdmin: userInfo.isAdmin,\n            });\n            sk.on('message', (data) => {\n                if (allSelectedUser._id === data._id) {\n                    allMessages = [...allMessages, data];\n                } else {\n                    const existUser = allUsers.find((user) => user._id === data._id);\n                    if (existUser) {\n                        allUsers = allUsers.map((user) =>\n                            user._id === existUser._id ? { ...user, unread: true } : user\n                        );\n                        setUsers(allUsers);\n                    }\n                }\n                setMessages(allMessages);\n            });\n            sk.on('updateUser', (updatedUser) => {\n                const existUser = allUsers.find((user) => user._id === updatedUser._id);\n                if (existUser) {\n                    allUsers = allUsers.map((user) =>\n                        user._id === existUser._id ? updatedUser : user\n                    );\n                    setUsers(allUsers);\n                } else {\n                    allUsers = [...allUsers, updatedUser];\n                    setUsers(allUsers);\n                }\n            });\n            sk.on('listUsers', (updatedUsers) => {\n                allUsers = updatedUsers;\n                setUsers(allUsers);\n            });\n            sk.on('selectUser', (user) => {\n                allMessages = user.messages;\n                setMessages(allMessages);\n            });\n        }\n    }, [messages, socket, users, userInfo._id, userInfo.isAdmin,  userInfo.name]);\n\n    const selectUser = (user) => {\n        allSelectedUser = user;\n        setSelectedUser(allSelectedUser);\n        const existUser = allUsers.find((x) => x._id === user._id);\n        if (existUser) {\n            allUsers = allUsers.map((x) =>\n                x._id === existUser._id ? { ...x, unread: false } : x\n            );\n            setUsers(allUsers);\n        }\n        socket.emit('onUserSelected', user);\n    };\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (!messageBody.trim()) {\n            alert('Error. Please type message.');\n        } else {\n            allMessages = [\n                ...allMessages,\n                { body: messageBody, name: userInfo.name },\n            ];\n            setMessages(allMessages);\n            setMessageBody('');\n            setTimeout(() => {\n                socket.emit('onMessage', {\n                    body: messageBody,\n                    name: userInfo.name,\n                    isAdmin: userInfo.isAdmin,\n                    _id: selectedUser._id,\n                });\n            }, 1000);\n        }\n    };\n\n    return (\n        <div className=\"row top full-container\">\n            <div className=\"col-1 support-users\">\n                {users.filter((x) => x._id !== userInfo._id).length === 0 && (\n                    <MessageBox>No Online User Found</MessageBox>\n                )}\n                <ul>\n                    {users\n                        .filter((x) => x._id !== userInfo._id)\n                        .map((user) => (\n                            <li\n                                key={user._id}\n                                className={user._id === selectedUser._id ? '  selected' : '  '}\n                            >\n                                <button\n                                    className=\"block\"\n                                    type=\"button\"\n                                    onClick={() => selectUser(user)}\n                                >\n                                    {user.name}\n                                </button>\n                                <span\n                                    className={\n                                        user.unread ? 'unread' : user.online ? 'online' : 'offline'\n                                    }\n                                />\n                            </li>\n                        ))}\n                </ul>\n            </div>\n            <div className=\"col-3 support-messages\">\n                {!selectedUser._id ? (\n                    <MessageBox>Select a user to start chat</MessageBox>\n                ) : (\n                        <div>\n                            <div className=\"row\">\n                                <strong>Chat with {selectedUser.name} </strong>\n                            </div>\n                            <ul ref={uiMessagesRef}>\n                                {messages.length === 0 && <li>No message.</li>}\n                                {messages.map((msg, index) => (\n                                    <li key={index}>\n                                        <strong>{`${msg.name}: `}</strong> {msg.body}\n                                    </li>\n                                ))}\n                            </ul>\n                            <div>\n                                <form onSubmit={submitHandler} className=\"row\">\n                                    <input\n                                        value={messageBody}\n                                        onChange={(e) => setMessageBody(e.target.value)}\n                                        type=\"text\"\n                                        placeholder=\"type message\"\n                                    />\n                                    <button type=\"submit\">Send</button>\n                                </form>\n                            </div>\n                        </div>\n                    )}\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}