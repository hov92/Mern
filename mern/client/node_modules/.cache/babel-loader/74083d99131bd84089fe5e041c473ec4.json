{"ast":null,"code":"var _jsxFileName = \"/Users/dwaynehovington/Desktop/Mern/mern/client/src/screens/MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\nconst libs = ['places'];\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\n\nfunction MapScreen(props) {\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('location selected successfully.');\n      props.history.push('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadScript, {\n    libraries: libs,\n    googleMapsApiKey: googleApiKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"sample-map\",\n    mapContainerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    center: center,\n    zoom: 15,\n    onLoad: onLoad,\n    onIdle: onIdle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneSearchBox, {\n    onLoad: onLoadPlaces,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-input-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"primary\",\n    onClick: onConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, \"Confirm\"))), /*#__PURE__*/React.createElement(Marker, {\n    position: location,\n    onLoad: onMarkerLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  })))) : /*#__PURE__*/React.createElement(LoadingBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  });\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/Mern/mern/client/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","Axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","libs","defaultLocation","lat","lng","MapScreen","props","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","history","push","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n    LoadScript,\n    GoogleMap,\n    StandaloneSearchBox,\n    Marker,\n} from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\n\nconst libs = ['places'];\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\n\nfunction MapScreen(props) {\n    const [googleApiKey, setGoogleApiKey] = useState('');\n    const [center, setCenter] = useState(defaultLocation);\n    const [location, setLocation] = useState(center);\n\n    const mapRef = useRef(null);\n    const placeRef = useRef(null);\n    const markerRef = useRef(null);\n\n    useEffect(() => {\n        const fetch = async () => {\n            const { data } = await Axios('/api/config/google');\n            setGoogleApiKey(data);\n            getUserCurrentLocation();\n        };\n        fetch();\n    }, []);\n\n    const onLoad = (map) => {\n        mapRef.current = map;\n    };\n\n    const onMarkerLoad = (marker) => {\n        markerRef.current = marker;\n    };\n    const onLoadPlaces = (place) => {\n        placeRef.current = place;\n    };\n    const onIdle = () => {\n        setLocation({\n            lat: mapRef.current.center.lat(),\n            lng: mapRef.current.center.lng(),\n        });\n    };\n    const onPlacesChanged = () => {\n        const place = placeRef.current.getPlaces()[0].geometry.location;\n        setCenter({ lat: place.lat(), lng: place.lng() });\n        setLocation({ lat: place.lat(), lng: place.lng() });\n    };\n    const dispatch = useDispatch();\n    const onConfirm = () => {\n        const places = placeRef.current.getPlaces();\n        if (places && places.length === 1) {\n            // dispatch select action\n            dispatch({\n                type: USER_ADDRESS_MAP_CONFIRM,\n                payload: {\n                    lat: location.lat,\n                    lng: location.lng,\n                    address: places[0].formatted_address,\n                    name: places[0].name,\n                    vicinity: places[0].vicinity,\n                    googleAddressId: places[0].id,\n                },\n            });\n            alert('location selected successfully.');\n            props.history.push('/shipping');\n        } else {\n            alert('Please enter your address');\n        }\n    };\n\n    const getUserCurrentLocation = () => {\n        if (!navigator.geolocation) {\n            alert('Geolocation os not supported by this browser');\n        } else {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setCenter({\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                });\n                setLocation({\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                });\n            });\n        }\n    };\n\n    return googleApiKey ? (\n        <div className=\"full-container\">\n            <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\n                <GoogleMap\n                    id=\"sample-map\"\n                    mapContainerStyle={{ height: '100%', width: '100%' }}\n                    center={center}\n                    zoom={15}\n                    onLoad={onLoad}\n                    onIdle={onIdle}\n                >\n                    <StandaloneSearchBox\n                        onLoad={onLoadPlaces}\n                        onPlacesChanged={onPlacesChanged}\n                    >\n                        <div className=\"map-input-box\">\n                            <input type=\"text\" placeholder=\"Enter your address\"></input>\n                            <button type=\"button\" className=\"primary\" onClick={onConfirm}>\n                                Confirm\n              </button>\n                        </div>\n                    </StandaloneSearchBox>\n                    <Marker position={location} onLoad={onMarkerLoad}></Marker>\n                </GoogleMap>\n            </LoadScript>\n        </div>\n    ) : (\n            <LoadingBox></LoadingBox>\n        );\n}\n\nexport default MapScreen"]},"metadata":{},"sourceType":"module"}