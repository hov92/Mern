{"ast":null,"code":"import Axios from 'axios';\nimport { CART_ADD_ITEM, CART_ADD_ITEM_FAIL, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from \"../constants/cartConstants\";\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  const {\n    data\n  } = await Axios.get(`/api/products/${productId}`);\n  const {\n    cart: {\n      cartItems\n    }\n  } = getState();\n\n  if (cartItems.length > 0 && data.seller._id !== cartItems[0].seller._id) {\n    dispatch({\n      type: CART_ADD_ITEM_FAIL,\n      payload: `Can't Add To Cart. Buy from ${cartItems[0].seller.seller.name} in this order`\n    });\n  } else {\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        name: data.name,\n        image: data.image,\n        price: data.price,\n        countInStock: data.countInStock,\n        product: data._id,\n        seller: data.seller,\n        qty\n      }\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\nexport const removeFromCart = productId => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: productId\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/Mern/mern/client/src/actions/cartActions.js"],"names":["Axios","CART_ADD_ITEM","CART_ADD_ITEM_FAIL","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","addToCart","productId","qty","dispatch","getState","data","get","cart","cartItems","length","seller","_id","type","payload","name","image","price","countInStock","product","localStorage","setItem","JSON","stringify","removeFromCart","saveShippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,gBAA5C,EAA8DC,0BAA9D,EAA0FC,wBAA1F,QAA0H,4BAA1H;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,GAAZ,KAAoB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACvE,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,KAAK,CAACY,GAAN,CAAW,iBAAgBL,SAAU,EAArC,CAAvB;AACA,QAAM;AAAEM,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,MAA0BJ,QAAQ,EAAxC;;AACA,MAAII,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBJ,IAAI,CAACK,MAAL,CAAYC,GAAZ,KAAoBH,SAAS,CAAC,CAAD,CAAT,CAAaE,MAAb,CAAoBC,GAApE,EAAyE;AACrER,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAEhB,kBAAR;AAA4BiB,MAAAA,OAAO,EAAG,+BAA8BL,SAAS,CAAC,CAAD,CAAT,CAAaE,MAAb,CAAoBA,MAApB,CAA2BI,IAAK;AAApG,KAAD,CAAR;AACH,GAFD,MAEO;AACHX,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEjB,aADD;AAELkB,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAET,IAAI,CAACS,IADN;AAELC,QAAAA,KAAK,EAAEV,IAAI,CAACU,KAFP;AAGLC,QAAAA,KAAK,EAAEX,IAAI,CAACW,KAHP;AAILC,QAAAA,YAAY,EAAEZ,IAAI,CAACY,YAJd;AAKLC,QAAAA,OAAO,EAAEb,IAAI,CAACM,GALT;AAMLD,QAAAA,MAAM,EAAEL,IAAI,CAACK,MANR;AAOLR,QAAAA;AAPK;AAFJ,KAAD,CAAR;AAYAiB,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAelB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAAlC;AACH;AAEJ,CArBM;AAuBP,OAAO,MAAMe,cAAc,GAAItB,SAAD,IAAe,CAACE,QAAD,EAAWC,QAAX,KAAwB;AACjED,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEf,gBAAR;AAA0BgB,IAAAA,OAAO,EAAEZ;AAAnC,GAAD,CAAR;AACAkB,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAelB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAAlC;AACH,CAHM;AAKP,OAAO,MAAMgB,mBAAmB,GAAInB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEd,0BAAR;AAAoCe,IAAAA,OAAO,EAAER;AAA7C,GAAD,CAAR;AACAc,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAejB,IAAf,CAAxC;AACH,CAHM;AAKP,OAAO,MAAMoB,iBAAiB,GAAIpB,IAAD,IAAWF,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEb,wBAAR;AAAkCc,IAAAA,OAAO,EAAER;AAA3C,GAAD,CAAR;AACH,CAFM","sourcesContent":["import Axios from 'axios'\nimport { CART_ADD_ITEM, CART_ADD_ITEM_FAIL, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from \"../constants/cartConstants\";\n\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n    const { data } = await Axios.get(`/api/products/${productId}`);\n    const { cart: { cartItems } } = getState();\n    if (cartItems.length > 0 && data.seller._id !== cartItems[0].seller._id) {\n        dispatch({ type: CART_ADD_ITEM_FAIL, payload: `Can't Add To Cart. Buy from ${cartItems[0].seller.seller.name} in this order` })\n    } else {\n        dispatch({\n            type: CART_ADD_ITEM,\n            payload: {\n                name: data.name,\n                image: data.image,\n                price: data.price,\n                countInStock: data.countInStock,\n                product: data._id,\n                seller: data.seller,\n                qty,\n            },\n        });\n        localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n    }\n\n};\n\nexport const removeFromCart = (productId) => (dispatch, getState) => {\n    dispatch({ type: CART_REMOVE_ITEM, payload: productId });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n}\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n    dispatch({ type: CART_SAVE_SHIPPING_ADDRESS, payload: data })\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\n}\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n    dispatch({ type: CART_SAVE_PAYMENT_METHOD, payload: data })\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}