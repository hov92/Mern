{"ast":null,"code":"var _jsxFileName = \"/Users/dwaynehovington/Desktop/Mern/mern/client/src/components/Chatbox.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\nexport default function ChatBox(props) {\n  const {\n    userInfo\n  } = props;\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([{\n    name: 'Admin',\n    body: 'Hello there, Please ask your question.'\n  }]);\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (socket) {\n      socket.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin\n      });\n      socket.on('message', data => {\n        setMessages([...messages, {\n          body: data.body,\n          name: data.name\n        }]);\n      });\n    }\n  }, [messages, isOpen, socket]);\n\n  const supportHandler = () => {\n    setIsOpen(true);\n    console.log(ENDPOINT);\n    const sk = socketIOClient(ENDPOINT);\n    setSocket(sk);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      setMessages([...messages, {\n        body: messageBody,\n        name: userInfo.name\n      }]);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: userInfo._id\n        });\n      }, 1000);\n    }\n  };\n\n  const closeHandler = () => {\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, !isOpen ? /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: supportHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-support\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  }, \"Support \"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: closeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    ref: uiMessagesRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 37\n    }\n  }, `${msg.name}: `), \" \", msg.body))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: messageBody,\n    onChange: e => setMessageBody(e.target.value),\n    type: \"text\",\n    placeholder: \"type message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  }, \"Send\")))));\n}","map":{"version":3,"sources":["/Users/dwaynehovington/Desktop/Mern/mern/client/src/components/Chatbox.js"],"names":["React","useEffect","useRef","useState","socketIOClient","ENDPOINT","window","location","host","indexOf","ChatBox","props","userInfo","socket","setSocket","uiMessagesRef","isOpen","setIsOpen","messageBody","setMessageBody","messages","setMessages","name","body","current","scrollBy","top","clientHeight","left","behavior","emit","_id","isAdmin","on","data","supportHandler","console","log","sk","submitHandler","e","preventDefault","trim","alert","setTimeout","closeHandler","map","msg","index","target","value"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst ENDPOINT =\n    window.location.host.indexOf('localhost') >= 0\n        ? 'http://127.0.0.1:5000'\n        : window.location.host;\n\nexport default function ChatBox(props) {\n    const { userInfo } = props;\n    const [socket, setSocket] = useState(null);\n    const uiMessagesRef = useRef(null);\n    const [isOpen, setIsOpen] = useState(false);\n    const [messageBody, setMessageBody] = useState('');\n    const [messages, setMessages] = useState([\n        { name: 'Admin', body: 'Hello there, Please ask your question.' },\n    ]);\n\n    useEffect(() => {\n        if (uiMessagesRef.current) {\n            uiMessagesRef.current.scrollBy({\n                top: uiMessagesRef.current.clientHeight,\n                left: 0,\n                behavior: 'smooth',\n            });\n        }\n        if (socket) {\n            socket.emit('onLogin', {\n                _id: userInfo._id,\n                name: userInfo.name,\n                isAdmin: userInfo.isAdmin,\n            });\n            socket.on('message', (data) => {\n                setMessages([...messages, { body: data.body, name: data.name }]);\n            });\n        }\n    }, [messages, isOpen, socket,]);\n\n    const supportHandler = () => {\n        setIsOpen(true);\n        console.log(ENDPOINT);\n        const sk = socketIOClient(ENDPOINT);\n        setSocket(sk);\n    };\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (!messageBody.trim()) {\n            alert('Error. Please type message.');\n        } else {\n            setMessages([...messages, { body: messageBody, name: userInfo.name }]);\n            setMessageBody('');\n            setTimeout(() => {\n                socket.emit('onMessage', {\n                    body: messageBody,\n                    name: userInfo.name,\n                    isAdmin: userInfo.isAdmin,\n                    _id: userInfo._id,\n                });\n            }, 1000);\n        }\n    };\n    const closeHandler = () => {\n        setIsOpen(false);\n    };\n    return (\n        <div className=\"chatbox\">\n            {!isOpen ? (\n                <button type=\"button\" onClick={supportHandler}>\n                    <i className=\"fa fa-support\" />\n                </button>\n            ) : (\n                    <div className=\"card card-body\">\n                        <div className=\"row\">\n                            <strong>Support </strong>\n                            <button type=\"button\" onClick={closeHandler}>\n                                <i className=\"fa fa-close\" />\n                            </button>\n                        </div>\n                        <ul ref={uiMessagesRef}>\n                            {messages.map((msg, index) => (\n                                <li key={index}>\n                                    <strong>{`${msg.name}: `}</strong> {msg.body}\n                                </li>\n                            ))}\n                        </ul>\n                        <div>\n                            <form onSubmit={submitHandler} className=\"row\">\n                                <input\n                                    value={messageBody}\n                                    onChange={(e) => setMessageBody(e.target.value)}\n                                    type=\"text\"\n                                    placeholder=\"type message\"\n                                />\n                                <button type=\"submit\">Send</button>\n                            </form>\n                        </div>\n                    </div>\n                )}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}